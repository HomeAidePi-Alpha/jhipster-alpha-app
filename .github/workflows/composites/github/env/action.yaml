name: Create Github environment and secrets

inputs:
  ENVIRONMENT:
    description: 'Environment Name'
    required: true
  GITHUB_TOKEN: 
    description: 'Github actions token'
    required: true
  SNYK_TOKEN:
    description: 'Snyk Token'
    required: true
  SONAR_TOKEN:
    description: 'Sonarqube Token'
    required: true
  SONAR_URL:
    description: 'Sonarqube Url'
    required: true
  DOCKER_USERNAME:
    description: 'Docker Username'
    required: true
  DOCKER_PASSWORD:
    description: 'Docker Password'
    required: false
  AZURE_CONFIG_JSON:
    description: 'Azure Config as Json'
    required: false

runs:
    # composite type is key to chaining workflow modules accessed in repo or externally packaged or shared in an organization in github
    using: "composite"
    steps:
    # Checkout the repo
    - uses: actions/checkout@v3
      
    # Here we will create environment using gh cli 
    - name: Create an environment 
      id: create
      shell: bash
      # We place the GITHUB_TOKEN in a temp file so its not handled long then deleted
      run: |
        echo "${{ inputs.GITHUB_TOKEN}}" > .githubtoken
        gh auth login --with-token < .githubtoken
        rm .githubtoken
        gh api --method PUT -H "Accept: application/vnd.github.v3+json" /repos/${{ github.repository }}/environments/${{ inputs.ENVIRONMENT }}
    
    # Sleep for magic seconds to give the former process time to complete (may be legacy if they start to queue durably)
    - name: Sleep for 30 seconds
      id: sleep
      shell: bash
      run: |
        sleep 30s

    # Here we will push secrets using gh cli 
    # Basically from any source we seek to use and will be abstracted away from the consumer of the repo in one degree of separation 
    # Unless they are doing bad deeds with the keys such as writing them to console or external places the keys wont be reasonably able to be observed.
    # Consider federating Cloud Provider(s) to Github to prevent even bad deeds with the secrets as only The Cloud Provider and Github will exchange credentials along up-stream (back) channels.
    - name: Create secrets
      id: secrets
      shell: bash
      # We place the GITHUB_TOKEN in a temp file so its not handled long then deleted
      run: |
        echo "${{ inputs.GITHUB_TOKEN}}" > .githubtoken
        gh auth login --with-token < .githubtoken
        rm .githubtoken
        gh secret set ENVIRONMENT --body "${{  inputs.ENVIRONMENT }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        gh secret set SNYK_TOKEN --body "${{  inputs.SNYK_TOKEN }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        gh secret set SONAR_TOKEN --body "${{  inputs.SONAR_TOKEN }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        gh secret set SONAR_URL --body "${{  inputs.SONAR_URL }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        gh secret set DOCKER_USERNAME --body "${{  inputs.DOCKER_USERNAME }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        gh secret set DOCKER_PASSWORD --body "${{  inputs.DOCKER_PASSWORD }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        gh secret set AZURE_AD_CLIENT_ID --body "${{ fromJson( github.event.inputs.azure_config_json).AZURE_AD_CLIENT_ID }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        gh secret set AZURE_AD_TENANT_ID --body "${{ fromJson( github.event.inputs.azure_config_json).AZURE_AD_TENANT_ID }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        gh secret set AZURE_SUBSCRIPTION_ID --body "${{ fromJson( github.event.inputs.azure_config_json).AZURE_SUBSCRIPTION_ID }}" --env ${{  inputs.ENVIRONMENT }} --repos ${{ github.repository }}
        